local ArrayField = loadstring(game:HttpGet("https://raw.githubusercontent.com/Hosvile/Refinement/main/MC%3AArrayfield%20Library"))()

local Window = ArrayField:CreateWindow({
    Name = "Rinns Hub",
    LoadingTitle = "Rinns Hub",
    LoadingSubtitle = "Code by Rinn Ui by Sirius Ui remake by Hosvile",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "RinnsHubConfigs", 
        FileName = "RinnsHub"
    },
    Discord = {
        Enabled = true,
        Invite = "Mt9F5nc8Tg",
        RememberJoins = false
    },
    KeySystem = false,
})

local Tab = Window:CreateTab("Main Tab", 4483362458)

local toggleActive = false
local deathCount = 0
local nearestPlayer = nil

-- Function to teleport player
local function teleportPlayer(position)
    local player = game.Players.LocalPlayer
    if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        player.Character.HumanoidRootPart.CFrame = CFrame.new(position)
    end
end

-- Function to get the nearest player
local function getNearestPlayer()
    local players = game:GetService("Players")
    local localPlayer = players.LocalPlayer
    local shortestDistance = math.huge
    local nearestPlayer = nil

    for _, player in pairs(players:GetPlayers()) do
        if player ~= localPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local distance = (player.Character.HumanoidRootPart.Position - localPlayer.Character.HumanoidRootPart.Position).Magnitude
            if distance < shortestDistance then
                shortestDistance = distance
                nearestPlayer = player
            end
        end
    end

    return nearestPlayer
end

-- Function to check for the nearest player's death
local function checkForDeaths()
    while toggleActive do
        local currentNearestPlayer = getNearestPlayer()

        if currentNearestPlayer and currentNearestPlayer ~= nearestPlayer then
            nearestPlayer = currentNearestPlayer
            deathCount = 0
        end

        if nearestPlayer and nearestPlayer.Character and nearestPlayer.Character:FindFirstChildOfClass("Humanoid").Health == 0 then
            print(nearestPlayer.Name .. " died")
            deathCount = deathCount + 1

            if deathCount >= 5 then
                deathCount = 0
                wait(5)
                teleportPlayer(Vector3.new(27.81, -92.44, -203.39))
            end
        end

        wait(1)
    end
end

local auraEnabled = false
local knifeRange = 15 -- Default range

-- Knife Aura Toggle
Tab:CreateToggle({
    Name = "Knife Aura",
    Info = {
        Title = "Kills anyone in the range with your knife (have your knife out)",
        Description = "Automatically attacks players within a certain range.",
    },
    CurrentValue = false,
    Flag = "KnifeAuraToggle",
    Callback = function(toggleState)
        auraEnabled = toggleState
        if toggleState then
            print("Knife Aura On")
            spawn(function()
                while auraEnabled do
                    local localPlayer = game.Players.LocalPlayer
                    local localCharacter = localPlayer.Character
                    if localCharacter and localCharacter:FindFirstChild("HumanoidRootPart") then
                        local localPosition = localCharacter.HumanoidRootPart.Position
                        for _, player in pairs(game.Players:GetPlayers()) do
                            if player ~= localPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                                local targetPosition = player.Character.HumanoidRootPart.Position
                                local distance = (localPosition - targetPosition).Magnitude
                                if distance <= knifeRange then
                                    print("Found player in range: " .. player.Name)
                                    local args = {
                                        [1] = player.Character.UpperTorso
                                    }
                                    game:GetService("ReplicatedStorage").Remotes.Stab:FireServer(unpack(args))
                                    wait(0.5)
                                end
                            end
                        end
                    end
                    wait(0.1)
                end
            end)
        else
            print("Knife Aura Off")
        end
    end,
})

-- Knife Aura Range Slider
Tab:CreateSlider({
    Name = "Knife Aura Range",
    Range = {1, 30},
    Increment = 1,
    Suffix = "studs",
    CurrentValue = 15,
    Flag = "KnifeRangeSlider",
    Callback = function(num)
        knifeRange = num
        print("Knife range set to: " .. num)
    end,
})

local hitboxEnabled = false
getgenv().HitboxSize = 15
getgenv().HitboxTransparency = 0.5

-- Hitbox function
local function updateHitbox()
    game:GetService('RunService').RenderStepped:Connect(function()
        for _, v in next, game:GetService('Players'):GetPlayers() do
            if v.Name ~= game:GetService('Players').LocalPlayer.Name and v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
                pcall(function()
                    if hitboxEnabled then
                        v.Character.HumanoidRootPart.Size = Vector3.new(getgenv().HitboxSize, getgenv().HitboxSize, getgenv().HitboxSize)
                        v.Character.HumanoidRootPart.Transparency = getgenv().HitboxTransparency
                        v.Character.HumanoidRootPart.BrickColor = BrickColor.new("Really black")
                        v.Character.HumanoidRootPart.Material = "Neon"
                        v.Character.HumanoidRootPart.CanCollide = false
                    else
                        v.Character.HumanoidRootPart.Size = Vector3.new(2, 2, 1)
                        v.Character.HumanoidRootPart.Transparency = 1
                        v.Character.HumanoidRootPart.BrickColor = BrickColor.new("Medium stone grey")
                        v.Character.HumanoidRootPart.Material = "Plastic"
                        v.Character.HumanoidRootPart.CanCollide = false
                    end
                end)
            end
        end
    end)
end

-- Initial call to start the hitbox updates
updateHitbox()

-- Hitbox Toggle
Tab:CreateToggle({
    Name = "Hitbox",
    Info = {
        Title = "Changes the hitbox of other players",
        Description = "Enlarge or shrink the hitbox of other players.",
    },
    CurrentValue = false,
    Flag = "HitboxToggle",
    Callback = function(toggleState)
        hitboxEnabled = toggleState
        if toggleState then
            print("Hitboxes enabled")
        else
            print("Hitboxes disabled")
        end
    end,
})

-- Hitbox Size Slider
Tab:CreateSlider({
    Name = "Hitbox Size",
    Range = {1, 500},
    Increment = 1,
    Suffix = "studs",
    CurrentValue = 15,
    Flag = "HitboxSizeSlider",
    Callback = function(num)
        getgenv().HitboxSize = num
        print("Hitbox size set to: " .. num)
    end,
})

-- Hitbox Transparency Input
Tab:CreateInput({
    Name = "Hitbox Transparency",
    PlaceholderText = "0.1 - 1",
    RemoveTextAfterFocusLost = true,
    Callback = function(text)
        local transparency = tonumber(text)
        if transparency and transparency >= 0 and transparency <= 1 then
            getgenv().HitboxTransparency = transparency
            print("Hitbox transparency set to: " .. transparency)
        else
            print("Invalid transparency value. Please enter a number between 0 and 1.")
        end
    end,
})

-- Initialize the ArrayField library
local VisualsTab = ArrayField.newTab("Visuals Tab", "ImageIdHere")

-- Variables to keep track of the part and its state
local part
local rainbowConnection

-- Function to create the part
local function createPart()
    part = Instance.new("Part")
    part.Size = Vector3.new(100, 1, 100) -- Making it even larger and flat
    part.Anchored = true
    part.CanCollide = false
    part.Material = Enum.Material.SmoothPlastic
    part.Transparency = 0.25 -- Set to 0.25 transparency
    part.Parent = workspace

    -- Function to update the part's position and color
    rainbowConnection = game:GetService("RunService").RenderStepped:Connect(function()
        -- Get the player and their character
        local player = game.Players.LocalPlayer
        if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local rootPart = player.Character.HumanoidRootPart
            part.Position = rootPart.Position - Vector3.new(0, 7, 0) -- Position it 7 studs below the player

            -- Slower rainbow color transition
            local hue = (tick() % 20) / 20 -- Slows down the color transition
            part.Color = Color3.fromHSV(hue, 1, 1)
        end
    end)
end

-- Function to remove the part
local function removePart()
    if rainbowConnection then
        rainbowConnection:Disconnect()
        rainbowConnection = nil
    end
    if part then
        part:Destroy()
        part = nil
    end
end

-- Toggle for creating and removing the part
VisualsTab:NewToggle("Cool Part", "Makes A Cool Part Below Your Feet Oh yea", false, function(toggleState)
    if toggleState then
        createPart()
    else
        removePart()
    end
end)

-- Variables for highlighting state
local highlightEnabled = false

-- Function to highlight players
local function updateHighlight()
    for _, player in pairs(game:GetService('Players'):GetPlayers()) do
        if player.Name ~= game:GetService('Players').LocalPlayer.Name and player.Character then
            local character = player.Character
            if highlightEnabled then
                -- Create a Highlight object if it doesn't already exist
                if not character:FindFirstChild("PlayerHighlight") then
                    local highlight = Instance.new("Highlight")
                    highlight.Name = "PlayerHighlight"
                    highlight.Adornee = character
                    highlight.FillColor = Color3.new(1, 0, 0)  -- Red color
                    highlight.OutlineColor = Color3.new(1, 1, 1)  -- White outline
                    highlight.Parent = character
                end
            else
                -- Remove the Highlight object if it exists
                if character:FindFirstChild("PlayerHighlight") then
                    character:FindFirstChild("PlayerHighlight"):Destroy()
                end
            end
        end
    end
end

-- Update highlights every time a player joins or leaves
game:GetService('Players').PlayerAdded:Connect(updateHighlight)
game:GetService('Players').PlayerRemoving:Connect(updateHighlight)

-- Initial call to update highlights based on current state
updateHighlight()

-- Toggle for highlighting players
VisualsTab:NewToggle("Highlights", "Highlights every player", false, function(toggleState)
    highlightEnabled = toggleState
    updateHighlight()  -- Update highlights based on the new state
end)

-- Misc Tab initialization
local MiscTab = ArrayField.newTab("Misc Tab", "ImageIdHere")

-- Variable to store the original position
local originalPosition = nil

-- Toggle for Troll Teleport
MiscTab:NewToggle("Troll Teleport", "Teleports you to spawn so enemies can't get you", false, function(toggleState)
    local player = game:GetService("Players").LocalPlayer

    if toggleState then
        -- Store the original position
        originalPosition = player.Character.HumanoidRootPart.CFrame
        -- Teleport to the troll position
        player.Character.HumanoidRootPart.CFrame = CFrame.new(58.172, -77.441, -242.071)
    else
        -- Teleport back to the original position if it exists
        if originalPosition then
            player.Character.HumanoidRootPart.CFrame = originalPosition
        end
    end
end)

-- Button to teleport to 1v1 position
MiscTab:NewButton("Teleport to 1v1", "Teleports you to 1v1", function()
    local player = game:GetService("Players").LocalPlayer
    player.Character.HumanoidRootPart.CFrame = CFrame.new(27.186513900756836, -92.43848419189453, -203.76683044433594)
end)

-- Button to teleport to 2v2 position
MiscTab:NewButton("Teleport to 2v2", "Teleports you to 2v2", function()
    local player = game:GetService("Players").LocalPlayer
    player.Character.HumanoidRootPart.CFrame = CFrame.new(27.883989334106445, -92.36083221435547, -188.33795166015625)
end)

-- Button to teleport to 3v3 position
MiscTab:NewButton("Teleport to 3v3", "Teleports you to 3v3", function()
    local player = game:GetService("Players").LocalPlayer
    player.Character.HumanoidRootPart.CFrame = CFrame.new(29.191801071166992, -92.29767608642578, -172.86553955078125)
end)

-- Button to teleport to 4v4 position
MiscTab:NewButton("Teleport to 4v4", "Teleports you to 4v4", function()
    local player = game:GetService("Players").LocalPlayer
    player.Character.HumanoidRootPart.CFrame = CFrame.new(30.448232650756836, -92.2098159790039, -155.46713256835938)
end)

-- Button to rejoin the current server
MiscTab:NewButton("Rejoin", "Rejoins the current server", function()
    local player = game:GetService("Players").LocalPlayer
    local teleportService = game:GetService("TeleportService")
    teleportService:Teleport(game.PlaceId, player)
end)

-- Button to serverhop to a different server
MiscTab:NewButton("Serverhop", "Joins a different server", function()
    local player = game:GetService("Players").LocalPlayer
    local teleportService = game:GetService("TeleportService")
    local httpService = game:GetService("HttpService")
    local servers = httpService:JSONDecode(game:HttpGet("https://games.roblox.com/v1/games/"..game.PlaceId.."/servers/Public?sortOrder=Asc&limit=100")).data

    local availableServers = {}
    for _, server in pairs(servers) do
        if server.playing < server.maxPlayers and server.id ~= game.JobId then
            table.insert(availableServers, server.id)
        end
    end

    if #availableServers > 0 then
        local serverId = availableServers[math.random(1, #availableServers)]
        teleportService:TeleportToPlaceInstance(game.PlaceId, serverId, player)
    else
        print("No available servers found.")
    end
end)

