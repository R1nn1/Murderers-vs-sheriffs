-- Load the UI library
local DrRayLibrary = loadstring(game:HttpGet("https://raw.githubusercontent.com/AZYsGithub/DrRay-UI-Library/main/DrRay.lua"))()

-- Create a window using DrRay UI
local window = DrRayLibrary:Load("Rinns Hub", "Default")
local tab = DrRayLibrary.newTab("Main Tab", "ImageIdHere")

-- Kill all function
local function kill_all()
    -- Equips the first tool it finds in your backpack
    for _, v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
        if v:FindFirstChild("Fire") then
            game.Players.LocalPlayer.Character.Humanoid:EquipTool(v)
            break
        end
    end

    -- Sends a shoot event for every player online  
    for _, v in pairs(game.Players:GetPlayers()) do
        task.spawn(function()
            pcall(function()
                local Vec1 = Vector3.new(-186.46624755859375, 49.74998474121094, math.random(-49.323232, 49.488882))
                local Vec2 = Vector3.new(-254.47802734375, 68.99893188476562, math.random(-49.323232, 49.488882))
                local Vec3 = v.Character.LowerTorso
                local Vec4 = Vector3.new(-222.7018585205078, 60.864871978759766, math.random(-49.323232, 49.488882))
                
                game:GetService("ReplicatedStorage").Remotes.Shoot:FireServer(Vec1, Vec2, Vec3, Vec4)
            end)
        end)
    end
end

-- Loop kill all toggle state
local loopKillAllEnabled = false

-- Button to perform Kill All
tab.newButton("Kill All", "Kills Every Player In Your Match", function()
    kill_all()  -- Call the kill_all function when the button is pressed
end)

-- Toggle for Loop Kill All
tab.newToggle("Loop Kill All", "loops kill every player in your match", false, function(toggleState)
    loopKillAllEnabled = toggleState  -- Update the toggle state

    if loopKillAllEnabled then
        -- Loop to continuously perform Kill All
        while loopKillAllEnabled do
            task.spawn(function()
                kill_all()
            end)
            task.wait(1)  -- Adjust the delay as needed
        end
    end
end)

local auraEnabled = false
local knifeRange = 15 -- Default range

-- Knife Aura Toggle
tab.newToggle("Knife Aura", "Kills anyone in the range with your knife (have your knife out)", true, function(toggleState)
    auraEnabled = toggleState
    if toggleState then
        print("Knife Aura On")
        -- Start checking for players in range
        spawn(function()
            while auraEnabled do
                -- Get the local player's position
                local localPlayer = game.Players.LocalPlayer
                local localCharacter = localPlayer.Character
                if localCharacter and localCharacter:FindFirstChild("HumanoidRootPart") then
                    local localPosition = localCharacter.HumanoidRootPart.Position
                    
                    -- Loop through all players in the game
                    for _, player in pairs(game.Players:GetPlayers()) do
                        if player ~= localPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                            local targetPosition = player.Character.HumanoidRootPart.Position
                            local distance = (localPosition - targetPosition).Magnitude
                            
                            -- If the player is within the knife range
                            if distance <= knifeRange then
                                print("Found player in range: " .. player.Name)
                                
                                -- Replace 'Little_TrashMonkey' with the player in range
                                local args = {
                                    [1] = player.Character.UpperTorso
                                }
                                
                                -- Fire the server event
                                game:GetService("ReplicatedStorage").Remotes.Stab:FireServer(unpack(args))
                                
                                -- Add a slight delay to avoid rapid stabbing
                                wait(0.5)
                            end
                        end
                    end
                end
                wait(0.1) -- Adjust as needed for checking frequency
            end
        end)
    else
        print("Knife Aura Off")
    end
end)

-- Knife Aura Range Slider
tab.newSlider("Knife Aura Range", "Changes the range of the knife aura", 30, false, function(num)
    knifeRange = num -- Update the knife range with the slider value
    print("Knife range set to: " .. num)
end)

-- Variables for hitbox state and size
local hitboxEnabled = false
getgenv().HitboxSize = 15
getgenv().HitboxTransparency = 0.5

-- Hitbox function
local function updateHitbox()
    game:GetService('RunService').RenderStepped:Connect(function()
        for _, v in next, game:GetService('Players'):GetPlayers() do
            if v.Name ~= game:GetService('Players').LocalPlayer.Name and v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
                pcall(function()
                    if hitboxEnabled then
                        -- When hitbox is enabled, set to custom size and appearance
                        v.Character.HumanoidRootPart.Size = Vector3.new(getgenv().HitboxSize, getgenv().HitboxSize, getgenv().HitboxSize)
                        v.Character.HumanoidRootPart.Transparency = getgenv().HitboxTransparency
                        v.Character.HumanoidRootPart.BrickColor = BrickColor.new("Really black")
                        v.Character.HumanoidRootPart.Material = "Neon"
                        v.Character.HumanoidRootPart.CanCollide = false
                    else
                        -- When hitbox is disabled, revert to default size and appearance
                        v.Character.HumanoidRootPart.Size = Vector3.new(2, 2, 1)
                        v.Character.HumanoidRootPart.Transparency = 1
                        v.Character.HumanoidRootPart.BrickColor = BrickColor.new("Medium stone grey")
                        v.Character.HumanoidRootPart.Material = "Plastic"
                        v.Character.HumanoidRootPart.CanCollide = false
                    end
                end)
            end
        end
    end)
end

-- Initial call to start the hitbox updates
updateHitbox()

-- Hitbox Toggle
tab.newToggle("Hitbox", "Changes the hitbox of other players", true, function(toggleState)
    hitboxEnabled = toggleState
    if toggleState then
        print("Hitboxes enabled")
    else
        print("Hitboxes disabled")
    end
end)

-- Hitbox Size Slider
tab.newSlider("Hitbox Slider", "Change the size of players hitboxes", 500, false, function(num)
    getgenv().HitboxSize = num
    print("Hitbox size set to:", num)
end)

tab.newInput("Hitbox Transparency", "Changes the transparency of the hitboxes 0.1 - 1", function(text)
    local transparency = tonumber(text)
    if transparency and transparency >= 0 and transparency <= 1 then
        getgenv().HitboxTransparency = transparency
        print("Hitbox transparency set to:", transparency)
    else
        print("Invalid transparency value. Please enter a number between 0 and 1.")
    end
end)

local tab = DrRayLibrary.newTab("Visuals Tab", "ImageIdHere")


-- Variables to keep track of the part and its state
local part
local rainbowConnection

-- Function to create the part
local function createPart()
    part = Instance.new("Part")
    part.Size = Vector3.new(100, 1, 100) -- Making it even larger and flat
    part.Anchored = true
    part.CanCollide = false
    part.Material = Enum.Material.SmoothPlastic
    part.Transparency = 0.25 -- Set to 0.25 transparency
    part.Parent = workspace

    -- Function to update the part's position and color
    rainbowConnection = game:GetService("RunService").RenderStepped:Connect(function()
        -- Get the player and their character
        local player = game.Players.LocalPlayer
        if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local rootPart = player.Character.HumanoidRootPart
            part.Position = rootPart.Position - Vector3.new(0, 7, 0) -- Position it 20 studs below the player

            -- Slower rainbow color transition
            local hue = (tick() % 20) / 20 -- Slows down the color transition
            part.Color = Color3.fromHSV(hue, 1, 1)
        end
    end)
end

-- Function to remove the part
local function removePart()
    if rainbowConnection then
        rainbowConnection:Disconnect()
        rainbowConnection = nil
    end
    if part then
        part:Destroy()
        part = nil
    end
end

-- Toggle for creating and removing the part
tab.newToggle("Cool Part", "Makes A Cool Part Below Your Feet Oh yea", false, function(toggleState)
    if toggleState then
        print("On")
        createPart()
    else
        print("Off")
        removePart()
    end
end)

-- Variables for highlighting state
local highlightEnabled = false

-- Function to highlight players
local function updateHighlight()
    for _, player in pairs(game:GetService('Players'):GetPlayers()) do
        if player.Name ~= game:GetService('Players').LocalPlayer.Name and player.Character then
            local character = player.Character
            if highlightEnabled then
                -- Create a Highlight object if it doesn't already exist
                if not character:FindFirstChild("PlayerHighlight") then
                    local highlight = Instance.new("Highlight")
                    highlight.Name = "PlayerHighlight"
                    highlight.Adornee = character
                    highlight.FillColor = Color3.new(1, 0, 0)  -- Red color
                    highlight.OutlineColor = Color3.new(1, 1, 1)  -- White outline
                    highlight.Parent = character
                end
            else
                -- Remove the Highlight object if it exists
                if character:FindFirstChild("PlayerHighlight") then
                    character:FindFirstChild("PlayerHighlight"):Destroy()
                end
            end
        end
    end
end

-- Update highlights every time a player joins or leaves
game:GetService('Players').PlayerAdded:Connect(updateHighlight)
game:GetService('Players').PlayerRemoving:Connect(updateHighlight)

-- Initial call to update highlights based on current state
updateHighlight()

-- Toggle for highlighting players
tab.newToggle("Highlights", "Highlights every player", false, function(toggleState)
    highlightEnabled = toggleState
    updateHighlight()  -- Update highlights based on the new state
    if toggleState then
        print("Highlighting enabled")
    else
        print("Highlighting disabled")
    end
end)


local tab = DrRayLibrary.newTab("Misc Tab", "ImageIdHere")

-- Variable to store the original position
local originalPosition = nil

-- Toggle for Troll Teleport
tab.newToggle("Troll Teleport", "teleports you to spawn so enimes cant get you", false, function(toggleState)
    local player = game:GetService("Players").LocalPlayer

    if toggleState then
        -- Store the original position
        originalPosition = player.Character.HumanoidRootPart.CFrame
        -- Teleport to the troll position
        player.Character.HumanoidRootPart.CFrame = CFrame.new(58.172, -77.441, -242.071)
    else
        -- Teleport back to the original position if it exists
        if originalPosition then
            player.Character.HumanoidRootPart.CFrame = originalPosition
        end
    end
end)

-- Button to teleport to 1v1 position
tab.newButton("Teleport to 1v1", "Teleports you to 1v1", function()
    local player = game:GetService("Players").LocalPlayer
    player.Character.HumanoidRootPart.CFrame = CFrame.new(27.186513900756836, -92.43848419189453, -203.76683044433594)
end)

-- Button to teleport to 2v2 position
tab.newButton("Teleport to 2v2", "Teleports you to 2v2", function()
    local player = game:GetService("Players").LocalPlayer
    player.Character.HumanoidRootPart.CFrame = CFrame.new(27.883989334106445, -92.36083221435547, -188.33795166015625)
end)

-- Button to teleport to 3v3 position
tab.newButton("Teleport to 3v3", "Teleports you to 3v3", function()
    local player = game:GetService("Players").LocalPlayer
    player.Character.HumanoidRootPart.CFrame = CFrame.new(29.191801071166992, -92.29767608642578, -172.86553955078125)
end)

-- Button to teleport to 4v4 position
tab.newButton("Teleport to 4v4", "Teleports you to 4v4", function()
    local player = game:GetService("Players").LocalPlayer
    player.Character.HumanoidRootPart.CFrame = CFrame.new(30.448232650756836, -92.2098159790039, -155.46713256835938)
end)

-- Button to rejoin the current server
tab.newButton("Rejoin", "Rejoins the current server", function()
    local player = game:GetService("Players").LocalPlayer
    local teleportService = game:GetService("TeleportService")
    teleportService:Teleport(game.PlaceId, player)
end)

-- Button to serverhop to a different server
tab.newButton("Serverhop", "Joins a different server", function()
    local player = game:GetService("Players").LocalPlayer
    local teleportService = game:GetService("TeleportService")
    local httpService = game:GetService("HttpService")
    local servers = httpService:JSONDecode(game:HttpGet("https://games.roblox.com/v1/games/"..game.PlaceId.."/servers/Public?sortOrder=Asc&limit=100")).data

    local availableServers = {}
    for _, server in pairs(servers) do
        if server.playing < server.maxPlayers and server.id ~= game.JobId then
            table.insert(availableServers, server.id)
        end
    end

    if #availableServers > 0 then
        local serverId = availableServers[math.random(1, #availableServers)]
        teleportService:TeleportToPlaceInstance(game.PlaceId, serverId, player)
    else
        print("No available servers found.")
    end
end)
