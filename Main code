local ArrayField = loadstring(game:HttpGet("https://raw.githubusercontent.com/Hosvile/Refinement/main/MC%3AArrayfield%20Library"))()

local Window = ArrayField:CreateWindow({
    Name = "Rinns Hub",
    LoadingTitle = "Rinns Hub",
    LoadingSubtitle = "Code by Rinn Ui by Sirius Ui remake by Hosvile",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "RinnsHubConfigs", 
        FileName = "RinnsHub"
    },
    Discord = {
        Enabled = true,
        Invite = "Mt9F5nc8Tg",
        RememberJoins = false
    },
    KeySystem = false,
})

local Tab = Window:CreateTab("Main Tab", 4483362458)

local toggleActive = false
local deathCount = 0
local nearestPlayer = nil

-- Function to teleport player
local function teleportPlayer(position)
    local player = game.Players.LocalPlayer
    if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        player.Character.HumanoidRootPart.CFrame = CFrame.new(position)
    end
end

-- Function to get the nearest player
local function getNearestPlayer()
    local players = game:GetService("Players")
    local localPlayer = players.LocalPlayer
    local shortestDistance = math.huge
    local nearestPlayer = nil

    for _, player in pairs(players:GetPlayers()) do
        if player ~= localPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local distance = (player.Character.HumanoidRootPart.Position - localPlayer.Character.HumanoidRootPart.Position).Magnitude
            if distance < shortestDistance then
                shortestDistance = distance
                nearestPlayer = player
            end
        end
    end

    return nearestPlayer
end

-- Function to check for the nearest player's death
local function checkForDeaths()
    while toggleActive do
        local currentNearestPlayer = getNearestPlayer()

        if currentNearestPlayer and currentNearestPlayer ~= nearestPlayer then
            nearestPlayer = currentNearestPlayer
            deathCount = 0
        end

        if nearestPlayer and nearestPlayer.Character and nearestPlayer.Character:FindFirstChildOfClass("Humanoid").Health == 0 then
            print(nearestPlayer.Name .. " died")
            deathCount = deathCount + 1

            if deathCount >= 5 then
                deathCount = 0
                wait(5)
                teleportPlayer(Vector3.new(27.81, -92.44, -203.39))
            end
        end

        wait(1)
    end
end

local auraEnabled = false
local knifeRange = 15 -- Default range

-- Knife Aura Toggle
Tab:CreateToggle({
    Name = "Knife Aura",
    Info = {
        Title = "Kills anyone in the range with your knife (have your knife out)",
        Description = "Automatically attacks players within a certain range.",
    },
    CurrentValue = false,
    Flag = "KnifeAuraToggle",
    Callback = function(toggleState)
        auraEnabled = toggleState
        if toggleState then
            print("Knife Aura On")
            spawn(function()
                while auraEnabled do
                    local localPlayer = game.Players.LocalPlayer
                    local localCharacter = localPlayer.Character
                    if localCharacter and localCharacter:FindFirstChild("HumanoidRootPart") then
                        local localPosition = localCharacter.HumanoidRootPart.Position
                        for _, player in pairs(game.Players:GetPlayers()) do
                            if player ~= localPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                                local targetPosition = player.Character.HumanoidRootPart.Position
                                local distance = (localPosition - targetPosition).Magnitude
                                if distance <= knifeRange then
                                    print("Found player in range: " .. player.Name)
                                    local args = {
                                        [1] = player.Character.UpperTorso
                                    }
                                    game:GetService("ReplicatedStorage").Remotes.Stab:FireServer(unpack(args))
                                    wait(0.5)
                                end
                            end
                        end
                    end
                    wait(0.1)
                end
            end)
        else
            print("Knife Aura Off")
        end
    end,
})

-- Knife Aura Range Slider
Tab:CreateSlider({
    Name = "Knife Aura Range",
    Range = {1, 30},
    Increment = 1,
    Suffix = "studs",
    CurrentValue = 15,
    Flag = "KnifeRangeSlider",
    Callback = function(num)
        knifeRange = num
        print("Knife range set to: " .. num)
    end,
})

local hitboxEnabled = false
getgenv().HitboxSize = 15
getgenv().HitboxTransparency = 0.5

-- Hitbox function
local function updateHitbox()
    game:GetService('RunService').RenderStepped:Connect(function()
        for _, v in next, game:GetService('Players'):GetPlayers() do
            if v.Name ~= game:GetService('Players').LocalPlayer.Name and v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
                pcall(function()
                    if hitboxEnabled then
                        v.Character.HumanoidRootPart.Size = Vector3.new(getgenv().HitboxSize, getgenv().HitboxSize, getgenv().HitboxSize)
                        v.Character.HumanoidRootPart.Transparency = getgenv().HitboxTransparency
                        v.Character.HumanoidRootPart.BrickColor = BrickColor.new("Really black")
                        v.Character.HumanoidRootPart.Material = "Neon"
                        v.Character.HumanoidRootPart.CanCollide = false
                    else
                        v.Character.HumanoidRootPart.Size = Vector3.new(2, 2, 1)
                        v.Character.HumanoidRootPart.Transparency = 1
                        v.Character.HumanoidRootPart.BrickColor = BrickColor.new("Medium stone grey")
                        v.Character.HumanoidRootPart.Material = "Plastic"
                        v.Character.HumanoidRootPart.CanCollide = false
                    end
                end)
            end
        end
    end)
end

-- Initial call to start the hitbox updates
updateHitbox()

-- Hitbox Toggle
Tab:CreateToggle({
    Name = "Hitbox",
    Info = {
        Title = "Changes the hitbox of other players",
        Description = "Enlarge or shrink the hitbox of other players.",
    },
    CurrentValue = false,
    Flag = "HitboxToggle",
    Callback = function(toggleState)
        hitboxEnabled = toggleState
        if toggleState then
            print("Hitboxes enabled")
        else
            print("Hitboxes disabled")
        end
    end,
})

-- Hitbox Size Slider
Tab:CreateSlider({
    Name = "Hitbox Size",
    Range = {1, 500},
    Increment = 1,
    Suffix = "studs",
    CurrentValue = 15,
    Flag = "HitboxSizeSlider",
    Callback = function(num)
        getgenv().HitboxSize = num
        print("Hitbox size set to: " .. num)
    end,
})

-- Hitbox Transparency Input
Tab:CreateInput({
    Name = "Hitbox Transparency",
    PlaceholderText = "0.1 - 1",
    RemoveTextAfterFocusLost = true,
    Callback = function(text)
        local transparency = tonumber(text)
        if transparency and transparency >= 0 and transparency <= 1 then
            getgenv().HitboxTransparency = transparency
            print("Hitbox transparency set to: " .. transparency)
        else
            print("Invalid transparency value. Please enter a number between 0 and 1.")
        end
    end,
})
